bb

  ----------DAO----------
	
		-----------------IProductDAO


import java.util.List;
import java.util.Map;

import com.cnk.travelerpibe.workflow.entities.HistoryProduct;

public interface IProductDAO {

	//public void createProduct(ProductPojo product) ;
	//public void productUpdate(String productID,String status,String approveBy);
	//public List<ProductPojo> getProductList();
	
	//public ProductPojo getProductDetails(String prid);
	
	public void saveProductHistory(HistoryProduct entity);
	
	public List<HistoryProduct> getHistoryProductDeatilsByProductID(String productID);
	public List<HistoryProduct> getHistoryProductDeatilsByProcessID(String processID);
	
	//public List<Map> getTaskDetails(String prid);
	
	public List<Map> getAssignmentRoles(String function);

	
}
===================================End======================

	-----------------------IProcessLockingDAO

import com.cnk.travelerpibe.workflow.entities.ProcessLocking;

public interface IProcessLockingDAO {

	public void saveLockingRecord(ProcessLocking processLocking);
	public void updateLockingRecord(String productId,Integer status,String prid);
	public ProcessLocking getLockingRecord(String productId);
	
	
}
==============================End================
	------------------ProductDAOImpl

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Criteria;
import org.hibernate.Hibernate;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.hibernate.ejb.HibernateEntityManager;
import org.hibernate.metamodel.binding.HibernateTypeDescriptor;
import org.objectweb.asm.Type;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.cnk.travelerpibe.workflow.dao.IProductDAO;
import com.cnk.travelerpibe.workflow.entities.HistoryProduct;

@Repository
public class ProductDAOImpl implements IProductDAO {

	@Autowired
	private SessionFactory sessionFactory;
	
	public ProductDAOImpl()
	{
		System.out.println("product DAO");
	}

	/*public void createProduct(ProductPojo product) {

		System.out.println("call dao");
		//sessionFactory.getCurrentSession().save(product);
		sessionFactory.getCurrentSession().saveOrUpdate(product);
		System.out.println("create product");
	}*/

	
	/*public void productUpdate(String productID,String status,String approveBy) {
		
		
		
		ProductPojo pp=(ProductPojo)sessionFactory.getCurrentSession().get(ProductPojo.class, productID);
		pp.setApproveBy(approveBy);
		pp.setStatus(status);
		sessionFactory.getCurrentSession().saveOrUpdate(pp);
		
	}*/
	/*public List<ProductPojo> getProductList()
	{
		return sessionFactory.getCurrentSession().createQuery("from ProductPojo").list();
	}*/
	
	/*public ProductPojo getProductDetails(String prid)
	{
		String qu="select * from  ProductPojo atr where atr.attributeName = :contentID";
		Query query=(Query)sessionFactory.getCurrentSession().createQuery(qu).setParameter("contentID", prid);
		
		ProductPojo pp=(ProductPojo)sessionFactory.getCurrentSession().get(ProductPojo.class, prid);
		System.out.println("In DAO "+pp);
		return pp;
	}*/
	public void saveProductHistory(HistoryProduct entity)
	{
		sessionFactory.getCurrentSession().save(entity);
	}
	
	public List<HistoryProduct> getHistoryProductDeatilsByProductID(String productID)
	{
		
		Criteria cr = sessionFactory.getCurrentSession().createCriteria(HistoryProduct.class);
		cr.add(Restrictions.eq("productId", productID));
		List<HistoryProduct> results = cr.list();
		System.out.println("Total List Size is "+results.size());
		return  results;
	}
	
	public List<HistoryProduct> getHistoryProductDeatilsByProcessID(String processID)
	{
		Criteria cr = sessionFactory.getCurrentSession().createCriteria(HistoryProduct.class);
		cr.add(Restrictions.eq("processId", processID));
		List<HistoryProduct> results = cr.list();
		System.out.println("Total List Size is "+results.size());
		return  results;
	}
	
	/*public List<Map> getTaskDetails(String prid)
	{
		String q="select  PROC_INST_ID_, ID_,NAME_,ASSIGNEE_,DURATION_,DESCRIPTION_,(START_TIME_-END_TIME_) cTime from ACT_HI_TASKINST   where PROC_INST_ID_ ="+prid;
		Query query= sessionFactory.getCurrentSession().createSQLQuery(q)
				.addScalar("PROC_INST_ID_", Hibernate.STRING)
				.addScalar("ID_", Hibernate.STRING)
				.addScalar("NAME_", Hibernate.STRING)
				.addScalar("ASSIGNEE_", Hibernate.STRING)
				.addScalar("DURATION_", Hibernate.LONG)	
				.addScalar("DESCRIPTION_", Hibernate.STRING)
				.addScalar("cTime", Hibernate.STRING);
		
		
		List<Object[]> data =query.list();
		System.out.println("List Data is "+data);
	
		List<Map> taskDeatils=new ArrayList<Map>();
		for(Object[] oo: data){
				System.out.println(oo[0]+"  "+oo[1]+" "+oo[2]+"  "+oo[3]+" "+oo[4]+" "+oo[6]);
				Map<String,String> detailsMap=new HashMap<String,String>();
				detailsMap.put("ID", oo[1].toString());
				detailsMap.put("NAME", oo[2].toString());
				detailsMap.put("ASSIGNEE", oo[3].toString());
				//detailsMap.put("DURATION",getDate(Long.parseLong( oo[4].toString()), "dd/MM/yyyy hh:mm:ss.SSS"));
				detailsMap.put("DURATION",String.valueOf((Long.parseLong( oo[4].toString())/1000))+" Sec.");
				detailsMap.put("DESCRIPTION", oo[5].toString());
				detailsMap.put("cTime", oo[6].toString());
				taskDeatils.add(detailsMap);
		}
		
		return taskDeatils;
	}*/
	public  String getDate(long milliSeconds, String dateFormat)
	{
	    // Create a DateFormatter object for displaying date in specified format.
	    DateFormat formatter = new SimpleDateFormat(dateFormat);

	    // Create a calendar object that will convert the date and time value in milliseconds to date. 
	     Calendar calendar = Calendar.getInstance();
	     calendar.setTimeInMillis(milliSeconds);
	     return formatter.format(calendar.getTime());
	}
	

public List<Map> getAssignmentRoles(String function) {
		String q = "select IS_CREATOR_REQ,IS_QC_REQ,IS_APPROVER_REQ from ASSIGNMENT where FUNCTION_="+"'"+function+"'";
		Query query = sessionFactory.getCurrentSession().createSQLQuery(q)
				.addScalar("IS_CREATOR_REQ")
				.addScalar("IS_QC_REQ")
				.addScalar("IS_APPROVER_REQ");

		List<Object[]> data = query.list();
		System.out.println("List Data is " + data);

		List<Map> rolesDeatils = new ArrayList<Map>();
		for (Object[] oo : data) {
			System.out.println(oo[0] + "  " + oo[1] + " " + oo[2]);
			Map<String, String> detailsMap = new HashMap<String, String>();
			detailsMap.put("IS_CREATOR_REQ", oo[0].toString());
			detailsMap.put("IS_QC_REQ", oo[1].toString());
			detailsMap.put("IS_APPROVER_REQ", oo[2].toString());

			rolesDeatils.add(detailsMap);

			
		}
		return rolesDeatils;
		
	}
}
=================================================End===========================================

	----------------ProcessLockingDAOImpl

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.cnk.travelerpibe.workflow.dao.IProcessLockingDAO;
import com.cnk.travelerpibe.workflow.entities.ProcessLocking;

@Repository
public class ProcessLockingDAOImpl implements IProcessLockingDAO {

	@Autowired
	private SessionFactory sessionFactory;

	public void saveLockingRecord(ProcessLocking processLocking) {
		System.out.println("====Save  PL Data Done..............111111111111");	
		sessionFactory.getCurrentSession().save(processLocking);
		System.out.println("====Save  PL Data Done..............222222222222222");
	}


	//@Override
	public void updateLockingRecord(String productId, Integer status,String prid) {
			
		ProcessLocking processLocking =(ProcessLocking)sessionFactory.getCurrentSession().get(ProcessLocking.class, productId);
		processLocking.setStatus(status);
		processLocking.setcProcessId(prid);
		sessionFactory.getCurrentSession().saveOrUpdate(processLocking);
		
		
	}

	//@Override
	public ProcessLocking getLockingRecord(String productId) {
				
		return (ProcessLocking)sessionFactory.getCurrentSession().get(ProcessLocking.class, productId);
	}
}
=====================================================End=====================================

	--------------------Service
			-------------------IProductService

import java.util.List;
import java.util.Map;

import com.cnk.travelerpibe.workflow.entities.HistoryProduct;

public interface IProductService {

	//public void saveProduct(ProductPojo product) ;
	//public void productUpdate(String productID,String status,String approveBy);
	// public List<ProductPojo> productList();
	// public ProductPojo getProductDetails(String prid);
	
	 public void saveProductHistory(HistoryProduct entity);
	 public List<HistoryProduct> getHistoryProductDeatilsByProductID(String productID);
	 public List<HistoryProduct> getHistoryProductDeatilsByProcessID(String processID);
	// public List<Map> getTaskDetails(String prid);
	 
	 
	 public List<Map> getAssignmentRoles(String function);
	 
}
=================================================End======================================
	---------------------------IProcessLockingService 

import com.cnk.travelerpibe.workflow.entities.ProcessLocking;

public interface IProcessLockingService {

	public void saveLockingRecord(ProcessLocking processLocking);
	public void updateLockingRecord(String productId,Integer status,String prid);
	public ProcessLocking getLockingRecord(String productId);
}

==========================================End============================================
	-------------------------------ProductServiceImpl


import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cnk.travelerpibe.workflow.dao.IProductDAO;
import com.cnk.travelerpibe.workflow.entities.HistoryProduct;
import com.cnk.travelerpibe.workflow.service.IProductService;






@Service
public class ProductServiceImpl  implements IProductService{
	

	@Autowired
	private IProductDAO productDao;
	
	public ProductServiceImpl()
	{
		System.out.println("Service...");
	}
	
	/*@Transactional
	public void saveProduct(ProductPojo product) {
		System.out.println("service===============");
		productDao.createProduct(product);
		
	}*/

	/*@Transactional
	public void productUpdate(String productID, String status, String approveBy) {
		
		productDao.productUpdate(productID, status, approveBy);
		
	}*/
	
	//@Override
	/*@Transactional
	public List<ProductPojo> productList() {
		
		return productDao.getProductList();
	}*/
	
	/*@Transactional
	public ProductPojo getProductDetails(String prid)
	{
		return productDao.getProductDetails(prid);
	}*/
	
	@Transactional
	public void saveProductHistory(HistoryProduct entity)
	{
		productDao.saveProductHistory(entity);
	}
	
	@Transactional
	public List<HistoryProduct> getHistoryProductDeatilsByProductID(String productID)
	{
		return productDao.getHistoryProductDeatilsByProductID(productID);
	}
	
	@Transactional
	public List<HistoryProduct> getHistoryProductDeatilsByProcessID(String processID)
	{
		return productDao.getHistoryProductDeatilsByProcessID(processID);
	}
	
	/*@Transactional
	public List<Map> getTaskDetails(String prid)
	{
		return  productDao.getTaskDetails(prid);
	}*/
	
	@Transactional
	public List<Map> getAssignmentRoles(String function) {
		
		return productDao.getAssignmentRoles(function);
	}
}
=======================================End==============================
	------------------------ProcessLockingServiceImpl

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cnk.travelerpibe.workflow.dao.IProcessLockingDAO;
import com.cnk.travelerpibe.workflow.entities.ProcessLocking;
import com.cnk.travelerpibe.workflow.service.IProcessLockingService;





@Service
public class ProcessLockingServiceImpl implements IProcessLockingService {

	@Autowired
	private IProcessLockingDAO processLockingDAO;
	
	//@Override
	@Transactional
	public void saveLockingRecord(ProcessLocking processLocking) {
		processLockingDAO.saveLockingRecord(processLocking);
	}


	//@Override
	@Transactional
	public void updateLockingRecord(String productId, Integer status,String prid) {
		processLockingDAO.updateLockingRecord(productId, status,prid);
	}

	//@Override
	@Transactional
	public ProcessLocking getLockingRecord(String productId) {
		
		return processLockingDAO.getLockingRecord(productId);
	}

}
==================================End=====================================


--------------in controoler-------

	--------TaskAssignment  



import java.util.List;

import org.activiti.engine.HistoryService;
import org.activiti.engine.TaskService;
import org.activiti.engine.delegate.DelegateTask;
import org.activiti.engine.delegate.TaskListener;
import org.activiti.engine.history.HistoricTaskInstance;
import org.activiti.engine.task.Task;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import com.cnk.travelerpibe.workflow.service.GenericWorkFlowService;


@Component("taskAssignment")
public class TaskAssignment  //implements TaskListener {
{

	
	
	@Autowired
	GenericWorkFlowService genericWorkFlowService;
	
 /* public void notify-123(DelegateTask delegateTask) {
	  System.out.println(" Before Listener Details "+delegateTask.getAssignee()+" "+delegateTask.getDescription()+" "+delegateTask.getName() +" "+delegateTask.getProcessInstanceId());
	  
	  
	  
	  String prid=delegateTask.getProcessInstanceId();
	  List<Task> task2 = taskService.createTaskQuery().processInstanceId(prid).list();
	    for(Task task:task2)
		  System.out.println("Task details "+task.getName()+" "+task.getAssignee()+" "+task.getId()+"  prid "+ prid);

	      System.out.println("History Task Details===================");
	  List<HistoricTaskInstance> task3= genericWorkFlowService.getAllTaskHistoyDetailsByProcessInstanceID(prid);
	  	for(HistoricTaskInstance htask:task3)
		  System.out.println("Task details "+htask.getName()+" "+htask.getAssignee()+" "+htask.getId());
	  
    //delegateTask.setAssignee("lucy");
    
    //System.out.println("Afetr Listener Details "+delegateTask.getAssignee()+" "+delegateTask.getDescription()+" "+delegateTask.getName());
  }*/
  public void getTask(DelegateTask task, String eventName){
		if(TaskListener.EVENTNAME_CREATE.equals(eventName)) {
			System.out.println("In Listener  ID " +task.getProcessInstanceId()+ "Event Name "+eventName);
			
	String prid=task.getProcessInstanceId();
			
	System.out.println("Current Task============");
			
			List<Task> task2=	genericWorkFlowService.getTaskDetailsByPRID(prid);
			   for(Task taskT:task2)
				  System.out.println("Task details "+taskT.getName()+" "+taskT.getAssignee()+" "+taskT.getId()+"  "+taskT.getDescription()+"  prid "+ prid);

			
			System.out.println("=================== History Task ============");
			List<HistoricTaskInstance> task3= genericWorkFlowService.getAllTaskHistoyDetailsByProcessInstanceID(prid);
			  	for(HistoricTaskInstance htask:task3)
				  System.out.println("Task details "+htask.getName()+" "+htask.getAssignee()+" "+htask.getId()+" "+htask.getDeleteReason());
			  		System.out.println("=================== END  History Task ============");
			
			  	if(task3.size()>=1){
			  	task.setDescription(task3.get(0).getDescription());
			  	task.setAssignee(task3.get(0).getAssignee());
			  	task.setOwner(task3.get(0).getOwner());
			  	
			  	}
			
		} else if(TaskListener.EVENTNAME_ASSIGNMENT.equals(eventName)) {
			System.out.println("assigned to =============================" +task.getAssignee() +task.getName());
			}
  }
}
=================End================================

