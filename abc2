aa

  Spring Batch Java File 
----In DAO
  LedgerDAO
	LedgerDAOImpl
	Ledger
	Employee

-----In Service
	com.cnk.sbatch.batchbusiness(Package)
		LedgerMapper
		LedgerWriter
	com.cnk.sbatch.beans
		HelloTask
		MessageCounter
		MessageWriter
		TimeTask
	com.cnk.sbatch.listener
		AppJobExecutionListener
		ItemFailureLoggerListener



 ----In Cotroller
	JobLauncherController
	MyJobLouncherController	
	

----JobLauncherController

import java.util.HashMap;
import java.util.Map;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.configuration.JobRegistry;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.cnk.sbatch.dao.LedgerDAO;

@Controller(value="jobLauncherController")
public class JobLauncherController {

 

	@Autowired
    JobLauncher jobLauncher;

    @Autowired
    Job job;
    
    @Autowired
    JobRegistry jobRegistry;
    
    @Autowired
    LedgerDAO itemDao;

    private static int counter = 0;
    
    //@Scheduled(cron="0 0/2 9-12 ? * MON-FRI")
    //@Scheduled(fixedRate=20000)
    @RequestMapping(value="/jobLancher",method=RequestMethod.GET)
    public void handle(@RequestParam("jobName")String jobName) throws Exception{
    	
    	Map<String, JobParameter> parametersMap = new HashMap<String, JobParameter>();
    	 parametersMap.put("JobName", new JobParameter(jobName+ ++counter));
    		
         JobParameters jobParameters = new JobParameters(parametersMap);
    	JobParameters jobParams = jobParameters;
    	
    	//my 
    	
    	
    	/* JobParametersBuilder builder = new JobParametersBuilder();
         builder.addString("Date", "21/01/2013");
         
         JobExecution result= jobLauncher.run(job, builder.toJobParameters());*/
         
    	
    	//Job job = new SimpleJob();
       JobExecution result=jobLauncher.run(job, jobParams);
        
     // After job execution show details.
        System.out.print("Job status is " + result.getStatus() + ". ");
        System.out.print("Job has been started : " + result.getStartTime() + " and finished: "
                 + result.getEndTime() + ".\n");
       
    }
  /*  private JobParameters createJobParameters( String jobName) {
        Map<String, JobParameter> parametersMap = new HashMap<String, JobParameter>();
       
		//parametersMap.put("JobName", new JobParameter("MyJob1"+ ++counter));
        parametersMap.put("JobName", new JobParameter(jobName+ ++counter));
	
        JobParameters jobParameters = new JobParameters(parametersMap);
        return jobParameters;
    }*/
    
   /* @RequestMapping(value="/test",method=RequestMethod.GET)
    public String check(ModelMap map){
       
    	itemDao.save1();
    	System.out.println("sss");
        return "sucess";
    }*/
}
==========================================END======================
	--------------------MyJobLouncherController

import java.util.HashMap;
import java.util.Map;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.configuration.JobRegistry;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;


@Controller(value="myJobLouncherController")
public class MyJobLouncherController {

	@Autowired
    JobLauncher jobLauncher;

    @Autowired
    Job job;
    
    @Autowired
    JobRegistry jobRegistry;
    
    private static int counter = 0;
    
    @Scheduled(fixedRate=20000)
    @RequestMapping(value="/myjobLancher",method=RequestMethod.GET)
    public void messageHandling() throws Exception{

		Map<String, JobParameter> parametersMap = new HashMap<String, JobParameter>();
		parametersMap.put("JobName", new JobParameter("jobNameAB" + ++counter));

		JobParameters jobParameters = new JobParameters(parametersMap);
		JobParameters jobParams = jobParameters;
		JobExecution result = jobLauncher.run(job, jobParams);
		System.out.println("Result is "+result);
    }
}
==========================================END======================================
	------------LedgerMapper

import java.text.DecimalFormat;
import java.text.ParseException;

import org.springframework.batch.item.file.mapping.FieldSetMapper;
import org.springframework.batch.item.file.transform.FieldSet;
import org.springframework.stereotype.Component;

import com.cnk.sbatch.entities.Ledger;

@Component("ledgerMapper")
public class LedgerMapper implements FieldSetMapper {
	private final static String DATE_PATTERN = "mm/DD/yy";
	private final static String DOLLAR_PATTERN = "$###,###.###";

	public Object mapFieldSet(FieldSet fs) {
		Ledger item = new Ledger();
		int idx = 0;
		item.setReceiptDate(fs.readDate(idx++, DATE_PATTERN));
		item.setMemberName(fs.readString(idx++));
		item.setCheckNumber(fs.readString(idx++));
		item.setCheckDate(fs.readDate(idx++, DATE_PATTERN));
		item.setPaymentType(fs.readString(idx++));

		// deposit amount
		try {
			DecimalFormat fmttr = new DecimalFormat(DOLLAR_PATTERN);
			Number number = fmttr.parse(fs.readString(idx++));
			item.setDepositAmount(number.doubleValue());
		} catch (ParseException e) {
			item.setDepositAmount(0);
		}

		// payment amount
		try {
			DecimalFormat fmttr = new DecimalFormat(DOLLAR_PATTERN);
			Number number = fmttr.parse(fs.readString(idx++));
			item.setPaymentAmount(number.doubleValue());
		} catch (ParseException e) {
			item.setPaymentAmount(0);
		}
		
		item.setComments(fs.readString(idx++));

		//
		return item;
	}
}
==========================================END======================================

------------LedgerWriter

import java.util.Iterator;
import java.util.List;

import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.cnk.sbatch.dao.LedgerDAO;
import com.cnk.sbatch.entities.Ledger;

@Component("itemWriter")
public class LedgerWriter implements ItemWriter {

	@Autowired
	private LedgerDAO itemDAO;
	

	public void write(List items)throws Exception {
		
		for (Iterator<Ledger> iterator = items.iterator(); iterator.hasNext();) {
			Ledger item = iterator.next();
			//System.out.println(item.getCheckNumber());
			itemDAO.save(item);
			
			//System.out.println("ledger created");
		}
	}

	
}

==========================================END======================================

------------HelloTask

import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;

public class HelloTask implements Tasklet {

	private String taskStartMessage;

	public void setTaskStartMessage(String taskStartMessage) {
		this.taskStartMessage = taskStartMessage;
	}
	private int i=0;
	public RepeatStatus execute(StepContribution arg0, ChunkContext arg1)
			throws Exception {
		
		i+=1;
		System.out.println(taskStartMessage +i);
		if(i==5)
		{
			i=0;
			return RepeatStatus.FINISHED;
		}
		else		
			return RepeatStatus.CONTINUABLE;
	}
}


==========================================END======================================

------------MessageCounter

public class MessageCounter {
	 private int counter = 0;
	 
	    public void update(){
	        System.out.println("Update database...");
	    }
	 
	    public boolean isFinished(){
	 
	        boolean finishCondition;
	 
	        if (counter == 5){
	            finishCondition = true;
	        }else{
	            finishCondition = false;
	        }
	 
	        counter++;
	        if (finishCondition){
	            return true;
	        }
	        return finishCondition;
	    }
}


==========================================END======================================
	-----------------------ItemFailureLoggerListener

import org.springframework.batch.core.listener.ItemListenerSupport;
import org.springframework.stereotype.Component;

@Component("itemFailureLoggerListener")
public class ItemFailureLoggerListener extends ItemListenerSupport {
	/*private final static Logger logger = Logger
			.getLogger(ItemFailureLoggerListener.class);*/

	public void onReadError(Exception ex) {
		//logger.error("Encountered error on read", ex);
		System.out.println("Encountered error on read" +ex);
	}

	public void onWriteError(Exception ex, Object item) {
		//logger.error("Encountered error on write", ex);
		System.out.println("Encountered error on write"+ex);
	}

}
======================================END===========================================
	-----------------------AppJobExecutionListener

import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.stereotype.Component;

@Component("appJobExecutionListener")
public class AppJobExecutionListener implements JobExecutionListener {
	/*private final static Logger logger = Logger
			.getLogger(AppJobExecutionListener.class);*/
	public void afterJob(JobExecution jobExecution) {
		if (jobExecution.getStatus() == BatchStatus.COMPLETED) {
			//logger.info("Job completed: " + jobExecution.getJobId());
			System.out.println("Job completed: " + jobExecution.getJobId());
		} else if (jobExecution.getStatus() == BatchStatus.FAILED) {
			//logger.info("Job failed: " + jobExecution.getJobId());
			System.out.println("Job failed: " + jobExecution.getJobId());
		}
	}

	public void beforeJob(JobExecution jobExecution) {
		if (jobExecution.getStatus() == BatchStatus.COMPLETED) {
			//logger.info("Job completed: " + jobExecution.getJobId());
			System.out.println("Job completed: " + jobExecution.getJobId());
		} else if (jobExecution.getStatus() == BatchStatus.FAILED) {
			//logger.info("Job failed: " + jobExecution.getJobId());
			System.out.println("Job failed: " + jobExecution.getJobId());
		}
	}
}
==========================================END==========================================
	--------------------------------TimeTask

import java.util.Calendar;

import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;

public class TimeTask implements Tasklet {
	public RepeatStatus execute(StepContribution arg0, ChunkContext arg1)
			throws Exception {
		System.out.println(Calendar.getInstance().getTime());
		return RepeatStatus.FINISHED;
	}
}

============================================END===========================================
	--------------------------------MessageWriter

import java.util.Iterator;
import java.util.List;

import oracle.jdbc.driver.Message;

import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.repeat.RepeatListener;
import org.springframework.batch.repeat.policy.SimpleCompletionPolicy;
import org.springframework.batch.repeat.support.RepeatTemplate;
import org.springframework.stereotype.Component;

@Component("messageWriter")
public class MessageWriter implements ItemWriter {

	public void write(List items) throws Exception {

		for (Iterator<Message> iterator = items.iterator(); iterator.hasNext();) {
			Message item = iterator.next();

			//System.out.println(item.getMessageText());

			// repeat message logic start
			RepeatTemplate template = new RepeatTemplate();

			SimpleCompletionPolicy policy = new SimpleCompletionPolicy();
			policy.setChunkSize(5);

			template.setCompletionPolicy(policy);
/*
			MyRepeatCallback callback = new MyRepeatCallback();
			PrintMessage printMessage = new PrintMessage();
			printMessage.setMsg(item.getMessageText());

			callback.setPrintMessage(printMessage);

			RepeatListener[] listeners = { new MyRepeatListener() };
			template.setListeners(listeners);

			template.iterate(callback);*/

			// repeat logic end

		}
	}

}

=============================================END===================================
	-----------------------LedgerDAO

import com.cnk.sbatch.entities.Ledger;

public interface LedgerDAO {
	public void save(final Ledger note);
	//public void save1();
}

===============================================END=================================
	---------------------LedgerDAOImpl

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.cnk.sbatch.dao.LedgerDAO;
import com.cnk.sbatch.entities.Employee;
import com.cnk.sbatch.entities.Ledger;

@Repository
public class LedgerDAOImpl implements LedgerDAO {

	@Autowired
	private SessionFactory sessionFactory;
	
	 private static int counter = 0;

	@Transactional
	public void save(Ledger note) {
		
		System.out.println(++counter+"  "+ note.getComments()+" "+note.getMemberName()+" "+note.getCheckNumber() +" "+note.getDepositAmount()+" "+note.getPaymentAmount()+" "+note.getReceiptDate()+" "+note.getCheckDate());
		
		Session session=sessionFactory.openSession();
		session.getTransaction().begin();
		session.saveOrUpdate(note);
		session.getTransaction().commit();
		session.close();
		
		System.out.println("ledger save");
	}

	/*@Transactional
	public void save1() {
		Session session = sessionFactory.openSession();
		Employee e = new Employee();
		e.setEmp_id(10012);
		e.setEmp_address("hjhjh");
		e.setEmp_name("ddd");
		e.setEmp_salary(35000);
		session.save(e);
		
		 * List<Employee> li=session.createQuery("from Employee").list();
		 * for(Employee emp:li){ System.out.println(emp.getEmp_name()); }
		 
		System.out.println("hhhhh");
		session.close();

	}*/
	
	/*
	 * @Autowired private JdbcTemplate jdbcTemplate;
	 * 
	 * @Transactional(propagation = Propagation.REQUIRED) public void save(final
	 * Ledger item) { jdbcTemplate .update(
	 * "insert into ledger (LID,RECEIPT_DATE, MEMBER_NAME, CHECK_NUMBER, CHECK_DATE, PAYMENT_TYPE, DEPOSIT_AMOUNT, PAYMENT_AMOUNT, COMMENTS) values(?,?,?,?,?,?,?,?,?)"
	 * , new PreparedStatementSetter() { public void setValues(PreparedStatement
	 * stmt) throws SQLException { stmt.setDate(2, new java.sql.Date(item
	 * .getReceiptDate().getTime())); stmt.setString(3, item.getMemberName());
	 * stmt.setString(4, item.getCheckNumber()); stmt.setDate(5, new
	 * java.sql.Date(item .getCheckDate().getTime())); stmt.setString(6,
	 * item.getPaymentType()); stmt.setDouble(7, item.getDepositAmount());
	 * stmt.setDouble(8, item.getPaymentAmount()); stmt.setString(9,
	 * item.getComments()); stmt.setInt(1, 1); } }); }
	 */
}
====================================================END===========================
	----------------------------Ledger

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "LEDGER")
public class Ledger implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue
	@Column(name = "SNO")
	private Long lid;

	@Column(name = "RECEIPT_DATE")
	private Date receiptDate;

	@Column(name = "MEMBER_NAME")
	private String memberName;

	@Column(name = "CHECK_NUMBER")
	private String checkNumber;

	@Column(name = "CHECK_DATE")
	private Date checkDate;

	@Column(name = "PAYMENT_TYPE")
	private String paymentType;

	@Column(name = "DEPOSIT_AMOUNT")
	private double depositAmount;

	@Column(name = "PAYMENT_AMOUNT")
	private double paymentAmount;

	@Column(name = "COMMENTS")
	private String comments;

		// Getter & Setter
	}
============================================END====================
	--------------Employee

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;


@Entity
@Table(name="EMPLOYEE")
public class Employee implements Serializable{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Id
	@Column(name="EMP_ID")
	private int emp_id;
	
	@Column(name="EMP_NAME")
	private String emp_name;
	
	@Column(name="EMP_ADDRESS")
	private String emp_address;
	
	@Column(name="EMP_SALARY")
	private double emp_salary;


}
======================================END=========================================
	--------core-hibernate.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

	<!-- Enable annotation style of managing transactions -->
	 
    
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
        <property name="location" value="classpath:database.properties" />            
    </bean>
    <!--<bean id="defaultLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"/>-->
    <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url.kk}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
        <!--<property name="lobHandler" ref="defaultLobHandler"/>-->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${jdbc.dialect}</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                
                 <prop key="hibernate.cache.use_query_cache">true</prop> 
                 <prop key="hibernate.cache.provider_class">net.sf.Ehcache.hibernate.SingletonEhcacheProvider</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.EhCacheRegionFactory</prop>
                <prop key="net.sf.Ehcache.configurationResourceName">ehcache.xml</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				 <prop key="hibernate.generate_statistics">true</prop>
                 
            </props>
        </property>
        <property name="mappingResources">
              <list>
                
            </list>
        </property>
        
        <property name="annotatedClasses">
            <list>
            	<!-- masters -->
        		<value>com.cnk.sbatch.entities.Ledger</value>        
        		 <value>com.cnk.sbatch.entities.Employee</value>
            </list>
        </property>
    </bean>
            
     <bean id = "transactionManager" class = "org.springframework.orm.hibernate4.HibernateTransactionManager">
    <property name = "sessionFactory" ref = "sessionFactory" />
</bean>
     <tx:annotation-driven transaction-manager="transactionManager"/>       

    
</beans>
============================================END=============================
	-----------------database.properties
#jdbc.driverClassName=com.mysql.jdbc.Driver
#jdbc.dialect=org.hibernate.dialect.MySQLDialect
#jdbc.url.kk=jdbc:mysql://localhost:3306/TEST
#jdbc.username=root
#jdbc.password=

jdbc.driverClassName=oracle.jdbc.driver.OracleDriver
jdbc.dialect=org.hibernate.dialect.Oracle10gDialect
jdbc.url.kk=jdbc:oracle:thin:@10.21.12.129:1521:XE
jdbc.username=dev_env
jdbc.password=dev_env
========================================END====================================


	In CoreUI Resource Folder put a file as(ledger.txt,ledger1.txt,ledger2.txt)
	
put this code:-

02/22/09,Person1,1432,02/22/09,Offertery,$50.00,$0.00,comments
02/22/09,Person2,900,02/22/09,Offertery,$20.00,$0.00,comments
02/22/09,Person3,1802,02/14/09,Membership,$800.00,$0.00,comments
02/22/09,Person4,5281,02/22/09,Membership,$500.00,$0.00,split check
02/22/09,Person5,5281,02/22/09,Memorial,$50.00,$0.00,"4,split check
02/22/09,Person6,1803,02/14/09,Charity,$100.00,$0.00,comments
02/22/09,Person7,1803,02/14/09,Charity,$50.00,$0.00,comments
02/22/09,Person8,1151,03/01/09,Membership,$500.00,$0.00,comments
02/28/09,Person8,1152,03/01/09,Membership,$250.00,$0.00,comments
03/01/09,Person8,1153,03/01/09,Membership,$50.00,$0.00,comments
