aa

  Spring Webflow

http://www.tjeerd.net/
---DAO
	Customer
	ICustomerDAO
	CustomeDAOImpl
	GenericHibernateDAOImpl

---Service
	ICustomerService
	CustomerServiceImpl
	
--UI
	com.cnk.componentValidation(P)
		Breadcrumb
		BreadcrumbListener
		CustomerValidator
		
	In Resource
		hibernate.cfg.xml
		message.properties
	In Webapp
		index.jsp
		reources(Fplder)
			CSS
				wizard.css
			images
				crumbs_active.gif  as " > " (image formate)
				crumbs.gif  as " > " (image formate)
		
		In WEB_INF
			dispatcher-servlet.xml
			web.xm
			l
			
			flows
				customerReg.xml
			tags
				breadcrumb.tag
			
			view
				customer1.jsp
				customer2.jsp
				customerReg.jsp
				error.jsp
				success1.jsp

===================================================
	--------------Customer

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "customer")
public class Customer implements Serializable {

	private static final long serialVersionUID = 5121959532431981631L;

	@Id
	@Column(name = "customerId")
	private Integer customerId;

	@Column(name = "customerName")
	private String customerName;

	@Column(name = "phoneNumber")
	private String phoneNumber;

	@Column(name = "address")
	private String address;

	@Column(name = "productType")
	private String productType;

	@Column(name = "productName")
	private String productName;

	@Column(name = "productCost")
	private Integer productCost;

	@Column(name = "customerFeedback")
	private String customerFeedback;

}
=========================================END==============================
	--------------------ICustomerDAO , CustomeDAOImpl
import com.cnk.domain.Customer;

public interface ICustomerDAO {

	public void saveCustomer(Customer customer);

}

import org.springframework.stereotype.Repository;

import com.cnk.domain.Customer;
import com.cnk.idao.ICustomerDAO;
@Repository
public class CustomeDAOImpl extends GenericHibernateDAOImpl<Customer> implements ICustomerDAO {

	
	public CustomeDAOImpl()
	{
		setPersistenceClass(Customer.class);
	}
	public void saveCustomer(Customer customer)
	{
		save(customer);
	}
}
	--------------------GenericHibernateDAOImpl


import java.io.Serializable;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;


public abstract class GenericHibernateDAOImpl<T extends Serializable> {

	private Class<T> persistenceClass;

	@Autowired
	private SessionFactory sessionFactory;	

	/**
	 * @param sessionFactory the sessionFactory to set
	 */
    public void setSessionFactory(SessionFactory sessionFactory) {
            this.sessionFactory = sessionFactory;
    }
    protected Session getCurrentSession() {
		return sessionFactory.getCurrentSession();
	}

	public void setPersistenceClass(final Class<T> persistenceClass) {
		this.persistenceClass = persistenceClass;
	}

	@SuppressWarnings("unchecked")
	public T findById(final int id) {

		return (T) getCurrentSession().get(persistenceClass, id);
	}
	

	@SuppressWarnings("unchecked")
	public List<T> findAll() {
		return getCurrentSession().createQuery(
				"from " + persistenceClass.getName()).list();
	}

	
	public void save(final T entity) {
		getCurrentSession().persist(entity);
		
		
	}

	public void update(final T entity) {

		getCurrentSession().merge(entity);
	}

	public void delete(final T entity) {

		getCurrentSession().delete(entity);
	}

	public void deleteById(final int entityId) {
		final T entity = findById(entityId);
		delete(entity);
	}

	public void flush() {
		getCurrentSession().flush();
	}

	public void clear() {
		getCurrentSession().clear();
	}

	
}

=======================================================END==============================
	---------------------------ICustomerService . CustomerServiceImpl

import java.util.List;

import com.cnk.domain.Customer;

public interface ICustomerService {
	List<Customer>  getProducts(Customer customer);
	public void saveCustomerDetails(Customer customer);
}

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cnk.domain.Customer;
import com.cnk.idao.ICustomerDAO;
import com.cnk.iservice.ICustomerService;


@Service
public class CustomerServiceImpl implements ICustomerService {

	@Autowired
	ICustomerDAO customerDAO;
	
	
	@Override
	public List<Customer> getProducts(Customer customer) {
		List<Customer> customers=new ArrayList<Customer>();
		customers.add(customer);
		
		System.out.println("-----------"+customers);
		return customers;
	}	
	
	@Transactional
	public void saveCustomerDetails(Customer customer)
	{
		customerDAO.saveCustomer(customer);
	}

}
====================================================END=====================================

	----------------------Breadcrumb

import java.io.Serializable;

/**
 * This class represents a breadcrumb which holds the view state, the label and whether it is active or not. Active
 * means that it's the current step in the wizard.
 */

public class Breadcrumb implements Serializable {
    private static final long serialVersionUID = 1L;
    private String viewState;
    private String label;
    private boolean active;

    /**
     * Initialize a new breadcrumb.
     *
     * @param viewState the view state identifier
     * @param label descriptive label
     */
    public Breadcrumb(String viewState, String label) {
        this.viewState = viewState;
        this.label = label;
    }

    /**
     * Get the view state identifier.
     *
     * @return view state identifier
     */
    public String getViewState() {
        return this.viewState;
    }

    /**
     * Set the view state identifier.
     *
     * @param viewState view state identifier
     */
    public void setViewState(String viewState) {
        this.viewState = viewState;
    }

    /**
     * Get the descriptive label of the breadcrumb.
     *
     * @return descriptive label
     */
    public String getLabel() {
        return this.label;
    }

    /**
     * Set the descriptive label of the breadcrumb.
     *
     * @param label descriptive label of the breadcrumb
     */
    public void setLabel(String label) {
        this.label = label;
    }

    /**
     * Determine whether the current state is active.
     *
     * @return true if current state is active, otherwise false
     */
    public boolean getActive() {
        return active;
    }

    /**
     * Determine whether the current state is active.
     *
     * @return true if current state is active, otherwise false
     */
    public boolean isActive() {
        return getActive();
    }

    /**
     * Set the state of the breadcrumb.
     *
     * @param active true if state is active, othwerwise false
     */
    public void setActive(boolean active) {
        this.active = active;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.viewState == null) ? 0 : this.viewState.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Breadcrumb)) {
            return false;
        }
        Breadcrumb oBreadcrumb = (Breadcrumb) other;
        return this.viewState.equals(oBreadcrumb.viewState);
    }

}
=================================================================END===============================
	--------------------------BreadcrumbListener


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.webflow.core.collection.MutableAttributeMap;
import org.springframework.webflow.definition.StateDefinition;
import org.springframework.webflow.engine.Flow;
import org.springframework.webflow.engine.ViewState;
import org.springframework.webflow.execution.FlowExecutionListenerAdapter;
import org.springframework.webflow.execution.FlowSession;
import org.springframework.webflow.execution.RequestContext;
import org.springframework.webflow.execution.View;

import java.util.LinkedList;

/**
 * This class overrides the default flow execution listener, which means you can handle specific states
 * yourself.
 */

public class BreadcrumbListener extends FlowExecutionListenerAdapter {
    private static final Logger LOGGER = LoggerFactory.getLogger(BreadcrumbListener.class);
    private static final String CONTEXT_KEY = "breadcrumbtrail"; /* unique identifier accessible from within the view */

    /**
     * When starting a new wizard session, a fresh breadcrumb trail is generated.
     */
    public void sessionStarting(RequestContext context, FlowSession session, MutableAttributeMap input) {
        Flow flowDefinition = (org.springframework.webflow.engine.Flow) session.getDefinition();
        LinkedList<Breadcrumb> breadcrumbtrail = (LinkedList<Breadcrumb>) context.getFlowScope().get(CONTEXT_KEY);

        LOGGER.info("Starting session for " + flowDefinition.getId());

        if (breadcrumbtrail == null) {
            breadcrumbtrail = new LinkedList<Breadcrumb>();
            for (String stateId : flowDefinition.getStateIds()) {
                if (flowDefinition.getState(stateId) instanceof ViewState) {
                    ViewState viewState = (ViewState) flowDefinition.getState(stateId);
                    MutableAttributeMap attributes = viewState.getAttributes();

                    Breadcrumb breadcrumb = new Breadcrumb(stateId, (String)attributes.get("description"));
                    breadcrumbtrail.add(breadcrumb);
                }
            }
            context.getFlowScope().put(CONTEXT_KEY, breadcrumbtrail);
        }
    }

    /**
     * Set the active breadcrumb (step).
     */
    public void viewRendering(RequestContext context, View view, StateDefinition state) {
        super.viewRendering(context, view, state);

        LinkedList<Breadcrumb> breadcrumbtrail = (LinkedList<Breadcrumb>) context.getFlowScope().get(CONTEXT_KEY);

        for (Breadcrumb breadcrumb : breadcrumbtrail) {
            breadcrumb.setActive( state.getId().equals(breadcrumb.getViewState()) );
        }

        LOGGER.info("Active breadcrumb (step) is {}", state.getId());
    }

    /**
     * Wizard has reached end (finished) state.
     */
    public void sessionEnding(RequestContext context, FlowSession session, String outcome, MutableAttributeMap output) {
        LinkedList<Breadcrumb> breadcrumbtrail = (LinkedList<Breadcrumb>) context.getFlowScope().get(CONTEXT_KEY);

        for (Breadcrumb breadcrumb : breadcrumbtrail) {
            breadcrumb.setActive( false );
        }

        LOGGER.info("Wizard has reached end (finished) state.");
    }
}

======================================================END==========================================
	------------------------------CustomerValidator

import org.springframework.binding.message.MessageBuilder;
import org.springframework.binding.message.MessageContext;
import org.springframework.binding.validation.ValidationContext;
import org.springframework.stereotype.Component;

import com.cnk.domain.Customer;


@Component
public class CustomerValidator {

	
    public void validateCustomerReg(Customer customer,ValidationContext context) {
    	MessageContext messages = context.getMessageContext();      

        
        
        if(customer.getCustomerId()==null||customer.getCustomerId().equals(""))
        {
               messages.addMessage(new MessageBuilder().error().source("customerId").code("customer.customerId.required").build());
        }
        else if(customer.getCustomerName()==null||customer.getCustomerName().equals(""))
        {
            messages.addMessage(new MessageBuilder().error().source("customerName").code("customer.customerName.required").build());
        }
        else if(customer.getPhoneNumber()==null||customer.getPhoneNumber().equals(""))
        {
        	
        	
            messages.addMessage(new MessageBuilder().error().source("phoneNumber").code("customer.phoneNumber.required").build());
        }
        else if(!(isNumber(customer.getPhoneNumber())))
    		messages.addMessage(new MessageBuilder().error().source("phoneNumber").code("customer.phoneNumber1.required").build());
        
	}
    public void validateAccountAdded(Customer customer,ValidationContext context) {
    	MessageContext messages = context.getMessageContext();
    	if(customer.getAddress()==null||customer.getAddress().equals(""))
        {
               messages.addMessage(new MessageBuilder().error().source("address").code("customer.address.required").build());
        }
    	else if(customer.getProductType()==null||customer.getProductType().equals(""))
        {
            messages.addMessage(new MessageBuilder().error().source("productType").code("customer.productType.required").build());
        }
    }
    
    public void validateAccountadded2(Customer customer,ValidationContext context) {
    	MessageContext messages = context.getMessageContext();
    	if(customer.getProductName()==null||customer.getProductName().equals(""))
        {
               messages.addMessage(new MessageBuilder().error().source("productName").code("customer.productName.required").build());
        }
    	else if(customer.getProductCost()==null||customer.getProductCost().equals(""))
        {
            messages.addMessage(new MessageBuilder().error().source("productCost").code("customer.productCost.required").build());
        }
    	else if(customer.getCustomerFeedback()==null||customer.getCustomerFeedback().equals(""))
        {
            messages.addMessage(new MessageBuilder().error().source("customerFeedback").code("customer.customerFeedback.required").build());
        }
    	 
    }
    
    public  boolean isNumber(String data)
	{
		try{
		      Integer.parseInt(data);
		      return true;
		}catch (Exception  e){
		      return false;
		}
	}
}

=============================================END=================================
	------------------------hibernate.cfg.xml

<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD//EN"
    "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
 
<hibernate-configuration>
    <session-factory>
        <mapping class="com.cnk.domain.Customer" />
         
    </session-factory>
         
</hibernate-configuration>


	-----------------------message.properties
customer.customerId.required=Customer id is required
customer.customerName.required=Customer name is required
customer.phoneNumber.required= Customer phoneNumber is required
customer.address.required=Customer address is required
customer.productType.required=Customer product type is required
customer.productName.required=Customer product name is required
customer.productCost.required=Customer product cost is required
customer.customerFeedback.required=Customer feedback is required
customer.phoneNumber1.required= Should be number


=============================================END========================================
	------------------web.xml
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns="http://java.sun.com/xml/ns/javaee" 
xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
  <display-name>TestFlow</display-name>
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  
  <servlet>
  <servlet-name>dispatcher</servlet-name>
  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  <servlet-name>dispatcher</servlet-name>
  <url-pattern>*.do</url-pattern>
<!--   <url-pattern>/</url-pattern> -->
  </servlet-mapping>

</web-app>
======================================================END===============================
	--------------------------dispatcher-servlet.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:flow="http://www.springframework.org/schema/webflow-config"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/webflow-config
		http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.0.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"
		default-autowire="byName">

	<context:annotation-config />
	<context:component-scan base-package="com.cnk" />
	<mvc:annotation-driven/>
	
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- Enables annotated methods on POJO @Controllers (like CartController) -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<!-- Maps flow requests from DispatcherServlet to flowController -->
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<value>

				/customerReg.do=flowController

			</value>
		</property>
		<property name="alwaysUseFullPath" value="true" />
	</bean>
	<!-- Enables plain Controllers (e.g. FlowController) -->
	<bean
		class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />

<bean id="breadcrumbListener" class="com.cnk.componentValidation.BreadcrumbListener"></bean>
	<!-- Using FlowController instead of FlowHandlers; see SWF Reference Guide, 
		section 9.5. -->
	<bean id="flowController" class="org.springframework.webflow.mvc.servlet.FlowController">
		<property name="flowExecutor" ref="flowExecutor" />
	</bean>

	<flow:flow-executor id="flowExecutor" flow-registry="flowRegistry" >
	
	<flow:flow-execution-listeners>
		<flow:listener ref="breadcrumbListener"/>
	</flow:flow-execution-listeners>
	</flow:flow-executor>

	<!-- This creates an XmlFlowRegistryFactory bean -->
	<flow:flow-registry id="flowRegistry"
		flow-builder-services="flowBuilderServices">

		<flow:flow-location path="/WEB-INF/flows/customerReg.xml" />

	</flow:flow-registry>

	<flow:flow-builder-services id="flowBuilderServices"
		view-factory-creator="viewFactoryCreator" />

	<bean id="viewFactoryCreator"
		class="org.springframework.webflow.mvc.builder.MvcViewFactoryCreator">
		<property name="viewResolvers">
			<list>
				<ref bean="viewResolver" />
			</list>
		</property>
	</bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message</value>
			</list>
		</property>
	</bean>

	<!-- For Hibernate -->
	<bean id="propertyConfigurer" 
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="/WEB-INF/jdbc.properties" />


	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.databaseurl}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<!--<property name="lobHandler" ref="defaultLobHandler"/> -->
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				  <prop key="hbm2ddl.auto">create</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>

			</list>
		</property>

		<property name="annotatedClasses">
			<list>
				<!-- masters -->

				<value>com.cnk.domain.Customer</value>

			</list>
		</property>
	</bean>

<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- <bean name="customerService" class="org.cnk.recipies.service.CustomerServiceImpl"></bean> -->
	<bean name="customerService" class="com.cmk.serviceimpl.CustomerServiceImpl"></bean>



</beans>
================================================================END========================================
	-------------------------------customerReg.xml
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
		http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd" >
		<var name="customer" class="com.cnk.domain.Customer"/>
		<view-state id="customerReg" view="customerReg" model="customer">

			<attribute name="description" value="customer1"></attribute>
				<transition on="nextRegistration" to="accountAdded" validate="true"> </transition>
		</view-state>
		<view-state id="accountAdded" view="customer1" model="customer">
		<attribute name="description" value="customer2"></attribute>
			<transition on="previous" to="customerReg" >
			</transition>
			<transition on="continue" to="accountadded2" validate="true" >
			</transition>
		</view-state>
	<view-state id="accountadded2" view="customer2"  model="customer"  >
	<attribute name="description" value="customer2"></attribute>
	
			<transition on="previous" to="accountAdded"> </transition>
			<transition on="continue" to="saveCustomer" validate="true" > </transition>
	</view-state>
		<action-state id="saveCustomer">
		<evaluate expression="customerService.saveCustomerDetails(customer)"  result="flowScope.customer"/>
		
		<transition on-exception="java.lang.Exception" to="error"></transition>
		<transition to="success"/>
		
		</action-state>
		
		<end-state id="success" view="success1"></end-state>
		<end-state id="error" view="error"></end-state>
		
</flow>
=================================================END======================================================
	-----------------------------breadcrumb.tag
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ tag body-content="empty"%>

<%-- <ul class="breadcrumbtrail">
    <c:forEach items="${breadcrumbtrail}" var="breadcrumb">
        <c:set var="status" value=""/>
        <c:if test="${breadcrumb.active}">
            <c:set var="status" value="active"/>
        </c:if>
        <li><a href="#" title="${breadcrumb.label}" class="${status}">${breadcrumb.label}</a></li>
    </c:forEach>
</ul> --%>

<ul class="breadcrumbtrail">

	<c:set var="count" value="0" scope="page" />
	<c:forEach items="${breadcrumbtrail}" var="breadcrumb">

		<c:set var="status" value="" />
		<c:set var="count" value="${count + 1}" scope="page" />
		<c:choose>
			<c:when test="${breadcrumb.active}">
				<c:set var="status" value="active" />
				<li><a href="#" title="${breadcrumb.label}" class="${status}">${breadcrumb.label}</a></li>
			</c:when>
			<c:otherwise>
				<li><a href="#" title="${breadcrumb.label}" class="${status}"><c:out
							value="${count}"></c:out></a></li>
			</c:otherwise>
		</c:choose>
	</c:forEach>
</ul>
=========================================================END=================================================
	--------------------------------customer1.jsp
<%@taglib uri="http://www.springframework.org/tags" prefix="spring"%>
<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@taglib uri="http://www.springframework.org/tags" prefix="spring"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

 <%@ taglib prefix="wizard" tagdir="/WEB-INF/tags" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css"  href="./resources/css/wizard.css" />

<title>::Cox and Kings : IBE ::</title>

<style type="text/css">
.errors{
 color:red
}
</style>

</head>
<body>
<div id="main" >
<div class="breadcrumb"><wizard:breadcrumb/></div>
		 <div id="leftnav">
                     <ul>
                     <li><span>Add Product Details</span></li>
                     </ul>
              </div>
		
		<div style="width: 600px; border: dotted; border-color: green; ">
	  <form:form   method="post" action="${flowExecutionUrl}" modelAttribute="customer" >
		<table>
			<tr>
				<td>Customer Address:</td>
				<%-- <td><input type="text" name="address" value="${customerModel.address}"/></td> --%>
				<td><form:input path="address" /><form:errors path="address" cssClass="errors"/></td>
			</tr>
			
			<tr>
				<td>product type:</td>
				<%-- <td><input type="text" name="productType" value="${customerModel.productType}"/></td> --%>
				<td><form:input path="productType" /><form:errors path="productType" cssClass="errors"/></td>
			</tr>
			
			<tr><td></td><td><input  type="submit" name="_eventId_previous"
							value="PREVIOUS" />
							<input  type="submit" name="_eventId_continue"
							value="NEXT" />

					</td></tr>
		</table>

</form:form >
	</div>
		</div>
</body>
</html>
===========================================================END=====================================
	--------------------------customer2.jsp
<%@taglib uri="http://www.springframework.org/tags" prefix="spring"%>
<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@taglib uri="http://www.springframework.org/tags" prefix="spring"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
 <%@ taglib prefix="wizard" tagdir="/WEB-INF/tags" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" media="screen" href="./resources/css/wizard.css" />
<style type="text/css">
.errors{
 color:red


}
</style>

</head>
<body>
<div id="main"  >
<div class="breadcrumb"><wizard:breadcrumb/></div>
 <div id="leftnav">
                     <ul>
                     <li><span>Add Product Details222</span></li>
                     </ul>
              </div>
		<div style="width: 600px; border: dotted; border-color: green; ">
	 <form:form  method="post" action="${flowExecutionUrl}" modelAttribute="customer" >
		<table>
			<tr>
				<td>Product Name:</td>
				<%-- <td><input type="text" name="productName" value="${customerModel.productName}"/></td> --%>
				<td><form:input path="productName" /><form:errors path="productName" cssClass="errors"/></td>
			</tr>
			<tr>
				<td>Product Cost: </td>
				<%-- <td><input type="text" name="productCost" value="${customerModel.productCost}"/></td> --%>
				<td><form:input path="productCost" /><form:errors path="productCost" cssClass="errors"/></td>
			</tr>
			<tr>
				<td>Customer Feedback:</td>
				<%-- <td><input type="text" name="customerFeedback" value="${customerModel.customerFeedback}"/></td> --%>
				<td><form:input path="customerFeedback" /><form:errors path="customerFeedback" cssClass="errors"/></td>
			</tr>
			<tr><td></td><td><input  type="submit" name="_eventId_previous"
							value="PREVIOUS" />
							<input  type="submit" name="_eventId_continue"
							value="SUBMIT" />

					</td></tr>
		</table>

</form:form>
	</div>
		</div>
</body>
</html>
================================================END=========================================
	---------------------------------customerReg.jsp
<%@taglib uri="http://www.springframework.org/tags" prefix="spring"%>
<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@taglib uri="http://www.springframework.org/tags" prefix="spring"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
 <%@ taglib prefix="wizard" tagdir="/WEB-INF/tags" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>::Cox and Kings : IBE ::</title>
<link rel="stylesheet" type="text/css"  href="./resources/css/wizard.css" />
<style type="text/css">
.errors{
 color:red
}
</style>
</head>
<body>
<div id="main" >
<div class="breadcrumb"><wizard:breadcrumb/></div>
              <div id="leftnav">
                     <ul>
                     <li><span>Add Customer</span></li>
                     </ul>
              </div>
              
              <div style="width: 600px; border: dotted; border-color: green; ">
              <form:form  action="${flowExecutionUrl}"  method="post"  modelAttribute="customer"  >
              <table>
                     <tr><td>Customer Id:</td><td><form:input path="customerId" /><form:errors path="customerId" cssClass="errors"/></td></tr>
                     <tr><td>Customer Name:</td><td><form:input path="customerName" /><form:errors path="customerName" cssClass="errors"/></td></tr>
                     <tr><td>Phone Number:</td><td><form:input path="phoneNumber" /><form:errors path="phoneNumber" cssClass="errors"/></td></tr>
                     <tr><td></td><td><input  type="submit" name="_eventId_nextRegistration"  id="submit" value="NEXT"/></td></tr>
              </table>
</form:form>
       </div>             
              </div>
</body>
</html>

==================================================END===================================================
	-----------------------------------error.jsp
	
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
Error Page
</body>
</html>
====================================END==================================================================
	----------------------------------success1.jsp
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<b>Success...............</b>
<a href="customerReg.do"> Customer Web-flow </a>
</body>
</html>
=======================================================END==============================================
	---------------index.jsp
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Web-flow</title>
<link rel="stylesheet" type="text/css" media="screen" href="./resources/css/wizard.css" />
</head>
<body>

<%-- <jsp:forward page="home.do"></jsp:forward> --%>

<a href="customerReg.do"> Customer Web-flow </a>

</body>
</html>
======================================================END============================================
	--------------------wizard.css
.navigatorButtons {
	text-align: right;
	position: relative;
	bottom: -20px;
	position:absolute;
    width: 100%;
}

.navigatorButtons a {
    color: #000000;
    text-decoration: none;
}

.navigatorButtons span {
    width: 20px;
    height: 14px;
    background: rgba(29, 156, 255, 0.96);
    padding: 2px;
    text-align: center;
    border-radius: 5px;
    color: white;
    font-weight: bold;
}

.wizardContent {
	text-align: left;
    border: 1px solid #dedede;
    width: 60%;
    margin:0 auto;
	height: auto;
	position:relative;
}

.breadcrumb {
    text-align: center;
    margin:0 auto 5px;
    width: 60%;
}

ul, li {
    list-style-type:none;
    padding:0;
    margin:0;
}

.breadcrumbtrail {
    border: 1px solid #dedede;
    height: 2.3em;
}

.breadcrumbtrail li {
    float: left;
    line-height:2.3em;
    padding-left:.75em;
    color: #777;
}

.breadcrumbtrail li a {
    display:block;
    color: #000000;
    text-decoration: none;
    padding:0 15px 0 0;
    background:url(../images/crumbs.gif) no-repeat right center;
}


.breadcrumbtrail li a.active {
    color: #ff0000;
    background:url(../images/crumbs_active.gif) no-repeat right center;
}

.validationError {
    border-style: solid;
    border-width: 1px;
    border-color: #CD0A0A;
    background-color: #fdf3ee;
    margin-top: 1em;
    margin-bottom: 1em;
    padding-left: 1em;
    padding-top: 1em;
    padding-bottom: 1em;
}

.validationError li {
    margin-left: 1em;
    list-style-type: disc;
}

.validationErrorField {
    border-style: solid;
    border-width: 1px;
    border-color: #CD0A0A;
    background-color: #fdf3ee;
}

================================================END=====================================
	-----------------

	
