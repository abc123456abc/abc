aa


  ------------------Ldap Configuration

1.	Introduction
Many enterprises runs with many coexisting applications, each requiring authentication in order to access enterprise resources, for  this  purpose we need to managing 

user lists for each group within an organization, LDAP can be used as a central directory accessible from anywhere on the network.

1.1	Purpose
The main benefit of using LDAP is that information for an entire organization can be consolidated into a central repository. LDAP is more commonly used within 

individual organizations, like universities, government departments, and private companies.
1.2	Scope
            LDAP client application connects to an LDAP server, it can either query a directory or attempt to                        modify it. We can done the changes 

to LDAP server through java applications and through available   LDAP browsers.

1.3	Audience
          NTL, CNK Developers, Architects, Design & Testing personnel.
1.4	Assumption & Constraint 
Assuming that the Any applications can  integrated with the LDAP for providing Security.
Assuming that LDAP server installation should be done by admin.

2.	Objective

2.1	Requirements
LDAP setup need the following.
Configuration: windows7 or UNIX plot form.



3.1	LDAP Server Installation Procedure

Installation
You can download the latest version of OpenLDAP for Windows from this link http://www.userbooster.de/en/download/openldap-for-windows.aspx site. The installation is 

pretty straightforward. After running openldap-for-windows.msi, the standard security warning dialog appears. You should click Run to follow to the Welcome screen.




----SavePerson.jsp
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Create New Person</title>
</head>
<body>
<center>
<form action="savePerson" method="post">
<table style="border: medium;border-color:gray;">
<tr><th colspan="2">New User Details</th></tr>
<tr><td>Userid::</td><td><input type="text" name="userid" value=""/></td></tr>
<tr><td>CommanName::</td><td><input type="text" name="commonname" value=""/></td></tr>
<tr><td>Surname::</td><td><input type="text" name="surname" value=""/></td></tr>
<tr><td>GivenName::</td><td><input type="text" name="givenname" value=""/></td></tr>
<tr><td>Mail::</td><td><input type="text" name="mail" value=""/></td></tr>
<tr><td colspan="2"><input type="submit" value="submit"/></td></tr>
</table> 
</form>
</center> 
</body>
</html>  

==============================================
	------------------------------
Java Implementation Code 
Below code shows the persist the data in the LDAP Server using JNDI API.

String userid=request.getParameter("userid");
		System.out.println("User id::"+userid);
String commonname=request.getParameter("commonname");
String surname=request.getParameter("surname");
String mail=request.getParameter("mail");
String givenname=request.getParameter("givenname");
Attributes myAttrs = new BasicAttributes(true);  //Basic Attributes
Attribute objectClass = new BasicAttribute("objectclass"); //Adding Object Classes

objectClass.add("inetOrgPerson");
objectClass.add("organizationalPerson");
objectClass.add("person");
objectClass.add("top");

Attribute ouSet = new BasicAttribute("ou");
ouSet.add("people");
ouSet.add("ou=people");

myAttrs.put(objectClass);
myAttrs.put(ouSet);
myAttrs.put("uid",userid);
myAttrs.put("cn",commonname);
myAttrs.put("sn",surname);
myAttrs.put("givenname",givenname);
myAttrs.put("mail",mail);
Hashtable<Object,String> env=new Hashtable<Object,String>();
env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");
env.put(Context.PROVIDER_URL,"ldap://192.168.20.151:389");
env.put(Context.SECURITY_AUTHENTICATION,"simple");
env.put(Context.SECURITY_PRINCIPAL,"cn=Manager,dc=maxcrc,dc=com"); // specify the username
env.put(Context.SECURITY_CREDENTIALS,"secret"); // specify the password

    try{
    	DirContext dirCtx = new InitialDirContext(env);
    	System.out.println("Before creating root context");
    	
        final String groupDN ="ou=people,dc=maxcrc,dc=com";
       // The Common name must be equal in Attributes common Name
       
       Attributes dirc=dirCtx.getAttributes(groupDN); 
       System.out.println("Ou people attribue valuye::"+dirc.toString());
       dirCtx.bind("uid="+userid+","+groupDN,null,myAttrs);
        dirCtx.close();
    }catch(NamingException exception){
        System.out.println("**** Error ****");
        exception.printStackTrace();
        System.exit(0);
    }
		return "SavePersonSuccess";
 
	}

The above code implementation only for saving the data in LDAP server, By using the API  we can do CURD operations as like we done work with databases.
